openapi: 3.0.0
info:
  title: spacehop
  version: '1.0'
  description: ''
servers:
  - url: 'http://localhost:3000'
  - url: ''
    description: ''
paths:
  /api/businesses:
    parameters: []
    post:
      summary: 'BUSINESS : Resister a business'
      operationId: post-api-businesses
      responses:
        '200':
          description: OK
      parameters:
        - schema:
            type: string
          in: query
          name: name
          description: ex) "Spacehop Cafe"
        - schema:
            type: string
          in: query
          name: address_street
          description: ex) 1st Street
        - schema:
            type: string
          in: query
          name: address_city
          description: ex) "Roppongi"
        - schema:
            type: string
          in: query
          name: address_zip
          description: ex) "777-7777"
        - schema:
            type: string
          in: query
          name: phone
          description: ex) "111-1111-1111"
        - schema:
            type: integer
          in: query
          name: capacity
          description: ex) 20
        - schema:
            type: integer
          in: query
          name: price
          description: ex) 10000
        - schema:
            type: string
          in: query
          name: business_type
          description: ex) "Bar"
      description: |-
        Resister a business to DB(businesses)
        <br>```done```
  '/api/availability/{day}/{address_city}/{start_hour}/{end_hour}':
    get:
      summary: 'AVAILABILITY : Get selected availabilities'
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: get-api-availability
      description: |-
        Get all available spaces that filtered by day,address_city and open between start_hour and end_hour.
        <br>```done```
      parameters: []
    parameters:
      - schema:
          type: string
        name: day
        in: path
        required: true
        description: ex) "Monday"
      - schema:
          type: string
        name: address_city
        in: path
        required: true
        description: ex) "Roppongi"
      - schema:
          type: integer
        name: start_hour
        in: path
        required: true
        description: ex) 12
      - schema:
          type: integer
        name: end_hour
        in: path
        required: true
        description: ex) 16
  /api/availability/data:
    get:
      summary: 'AVAILABILITY : Get all availabilities'
      tags: []
      responses:
        '200':
          description: OK
      operationId: get-api-availability-data
      description: |-
        Get all availabilities(every row in table)
        <br>```done```
  /api/users:
    post:
      summary: 'USER : Resister a user'
      operationId: post-api-users
      responses:
        '200':
          description: OK
      description: |-
        Resister a user to DB(users)
        <br>```done```
      parameters:
        - schema:
            type: string
          in: query
          name: first_name
          description: ex) "Noritake"
        - schema:
            type: string
          in: query
          name: last_name
          description: ex) "Takamichi"
        - schema:
            type: string
          in: query
          name: email
          description: ex) "aaa@gmail.com"
        - schema:
            type: string
          in: query
          name: phone
          description: ex) "111-1111-1111"
  /api/users/data:
    get:
      summary: 'USER : Get all user data'
      tags: []
      responses:
        '200':
          description: OK
      operationId: get-api-users-data
      description: |-
        Get all user data 
        <br>```done```
  /api/reservations:
    post:
      summary: 'RESERVATION : Make a reservation'
      operationId: post-api-reservations
      responses:
        '200':
          description: OK
      description: |-
        Make a reservation
        <br>``not yet``
      parameters:
        - schema:
            type: string
          in: query
          name: date
          description: ex) "2020-10-09"
        - schema:
            type: integer
          in: query
          name: user_id
          description: ex) 3
        - schema:
            type: integer
          in: query
          name: business_id
          description: ex) 6
    parameters: []
  '/api/reservations/user/:user_id':
    parameters: []
    get:
      summary: 'USER : Get selected user''s reservations'
      tags: []
      responses:
        '200':
          description: OK
      operationId: get-api-reservations-user_id
      description: |-
        Get selected user's reservations
        <br>```not yet```
      parameters: []
  '/api/reservations/:business_id':
    parameters: []
    get:
      summary: 'RESERVATIONS : Get selected business''s reservations(not yet)'
      tags: []
      responses:
        '200':
          description: OK
      operationId: get-api-reservations-business_id
      description: |-
        Get selected business's reservations
        <br>```not yet```
      parameters: []
  '/api/users/:user_id':
    get:
      summary: 'USER : GET selected user''s info'
      tags: []
      responses:
        '200':
          description: OK
      operationId: 'get-api-users-:user_id'
      description: |-
        GET selected user's info
        <br>```done```
    post:
      summary: ''
      operationId: 'post-api-users-:user_id'
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
          application/xml:
            schema:
              type: object
              properties: {}
        description: |-
          first_name,
          last_name,
          email,
          phone
      description: |-
        CREATE user
        <br>```done```
    patch:
      summary: ''
      operationId: 'patch-api-users-:user_id'
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
          application/xml:
            schema:
              type: object
              properties: {}
        description: |-
          first_name,
          last_name,
          email,
          phone
      description: |-
        Edit selected user's info
        <br>```done```
    delete:
      summary: ''
      operationId: 'delete-api-users-:user_id'
      responses:
        '200':
          description: OK
      description: |-
        Delete selected user
        <br>```done```
  '/api/ratings/{user_id}/{business_id}':
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
      - schema:
          type: string
        name: business_id
        in: path
        required: true
    post:
      summary: Leave rating
      operationId: post-api-ratings-user_id-business_id
      responses:
        '200':
          description: OK
      description: |-
        Leave rating to business from user
        ```not yet```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
        description: |-
          point,
          comment
  '/api/ratings/{business_id}':
    parameters:
      - schema:
          type: string
        name: business_id
        in: path
        required: true
    get:
      summary: Get business's ratings
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value: {}
      operationId: get-api-ratings-business_id
      description: |-
        Get business's ratings
        ```not yet```
components:
  schemas: {}
